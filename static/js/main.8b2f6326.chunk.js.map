{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","seconds","setSeconds","active","setActive","sessionLength","setSessionLength","reduceSession","setReduceSession","increaseSession","setIncreaseSession","breakLength","setBreakLength","reduceBreak","setReduceBreak","increaseBreak","setIncreaseBreak","minutes","setMinutes","blockType","setBlockType","qRef","useRef","myTimer","useEffect","myVar","setInterval","clearInterval","current","play","currentTime","className","id","onClick","src","type","ref","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8b2f6326.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [seconds, setSeconds] = useState(0);\n  const [active, setActive] = useState(false);\n  //const [reset, setReset] = useState(() => () => setSeconds(0));\n  const [sessionLength, setSessionLength] = useState(25);\n  const [reduceSession, setReduceSession] = useState(false);\n  const [increaseSession, setIncreaseSession] = useState(false);\n\n  const [breakLength, setBreakLength] = useState(5);\n  const [reduceBreak, setReduceBreak] = useState(false);\n  const [increaseBreak, setIncreaseBreak] = useState(false);\n\n  const [minutes, setMinutes] = useState(sessionLength);\n  const [blockType, setBlockType] = useState(\"Session\");\n  let qRef = useRef();\n\n  useEffect(() => {\n    var myVar = null;\n    if (active) {\n      myVar = setInterval(myTimer, 1000);\n    } else if (active == false) {\n      clearInterval(myVar);\n    }\n    return () => clearInterval(myVar);\n  });\n\n  useEffect(() => {\n    if (minutes == 0 && seconds == 0) {\n      qRef.current.play();\n      qRef.current.currentTime = 0;\n    }\n  });\n  /*\n  function myTimer() {\n    let date = new Date();\n    let sec = date.getSeconds();\n\n    let min = date.getMinutes();\n    setSeconds(addZero(sec));\n    setMinutes(min);\n    let bebo = date.getDate();\n    setDateTest(bebo);\n  }  */\n\n  function myTimer() {\n    if (seconds > 0) {\n      setSeconds(seconds => seconds - 1);\n    } else if (seconds == 0 && minutes != 0) {\n      setSeconds(59);\n      setMinutes(minutes => minutes - 1);\n    } else if (minutes == 0 && seconds == 0 && blockType == \"Session\") {\n      setMinutes(breakLength);\n      setSeconds(0);\n      setBlockType(\"Break\");\n    } else if (minutes == 0 && seconds == 0 && blockType == \"Break\") {\n      setMinutes(sessionLength);\n      setBlockType(\"Session\");\n    }\n  }\n\n  function resetting() {\n    setActive(false);\n    setSeconds(0);\n    // setMinutes(25);\n    setSessionLength(25);\n    setMinutes(25);\n    setBreakLength(5);\n  }\n\n  useEffect(() => {\n    if (\n      reduceSession &&\n      blockType == \"Session\" &&\n      active == false &&\n      sessionLength > 1\n    ) {\n      setSessionLength(sessionLength => sessionLength - 1);\n      setMinutes(sessionLength - 1);\n      setReduceSession(false);\n      setSeconds(0);\n    } else if (\n      reduceSession &&\n      blockType == \"Session\" &&\n      active == true &&\n      sessionLength > 1\n    ) {\n      setReduceSession(false);\n    } else if (reduceSession && blockType == \"Break\" && sessionLength > 1) {\n      setSessionLength(sessionLength => sessionLength - 1);\n      setReduceSession(false);\n    } else if (reduceSession && sessionLength <= 1) {\n      setReduceSession(false);\n    }\n\n    if (\n      increaseSession &&\n      blockType == \"Session\" &&\n      active == false &&\n      sessionLength < 60\n    ) {\n      setSessionLength(sessionLength => sessionLength + 1);\n      setMinutes(sessionLength + 1);\n      setSeconds(0);\n      setIncreaseSession(false);\n    } else if (\n      increaseSession &&\n      blockType == \"Session\" &&\n      active == true &&\n      sessionLength < 60\n    ) {\n      setIncreaseSession(false);\n    } else if (increaseSession && blockType == \"Break\" && sessionLength < 60) {\n      setSessionLength(sessionLength => sessionLength + 1);\n      setIncreaseSession(false);\n    } else if (increaseSession && sessionLength >= 60) {\n      setIncreaseSession(false);\n    }\n  });\n\n  useEffect(() => {\n    if (\n      reduceBreak &&\n      blockType == \"Break\" &&\n      active == true &&\n      breakLength > 1\n    ) {\n      //setBreakLength(breakLength => breakLength - 1);\n      setReduceBreak(false);\n    } else if (\n      reduceBreak &&\n      blockType == \"Break\" &&\n      active == false &&\n      breakLength > 1\n    ) {\n      setBreakLength(breakLength => breakLength - 1);\n      setMinutes(minutes => minutes - 1);\n      setSeconds(0);\n      setReduceBreak(false);\n    } else if (reduceBreak && blockType == \"Session\" && breakLength > 1) {\n      setBreakLength(breakLength => breakLength - 1);\n      setReduceBreak(false);\n    } else if (reduceBreak && breakLength <= 1) {\n      setReduceBreak(false);\n    }\n\n    if (\n      increaseBreak &&\n      blockType == \"Break\" &&\n      active == true &&\n      breakLength < 60\n    ) {\n      //setBreakLength(breakLength => breakLength + 1);\n      //setMinutes(breakLength);\n      setIncreaseBreak(false);\n    } else if (\n      increaseBreak &&\n      blockType == \"Break\" &&\n      active == false &&\n      breakLength < 60\n    ) {\n      setBreakLength(breakLength => breakLength + 1);\n      setMinutes(breakLength + 1);\n      setSeconds(0);\n      setIncreaseBreak(false);\n    } else if (increaseBreak && blockType == \"Session\" && breakLength < 60) {\n      setBreakLength(breakLength => breakLength + 1);\n      setIncreaseBreak(false);\n    } else if (breakLength >= 60) {\n      setIncreaseBreak(false);\n    }\n  });\n\n  function handleFinish() {\n    if (minutes == 0 && seconds == 0 && blockType == \"Session\") {\n    }\n  }\n  //setSeconds(countDownSecs(seconds));\n\n  /*\n  function countDownSecs(secs) {\n    secs--;\n    setSeconds(secs);\n  }\n*/\n  // setting variable and calling function\n  /*\n  function addZero(elem) {\n    if (elem < 10) {\n      return `0${elem}`;\n    } else {\n      return elem;\n    }\n  }\n*/\n  return (\n    <div className=\"App\">\n      <div id=\"break-label\">Break Length</div>\n      <button\n        id=\"break-decrement\"\n        onClick={active == false ? () => setReduceBreak(true) : null}\n      >\n        down\n      </button>\n      <div id=\"break-length\">{breakLength}</div>\n      <button\n        id=\"break-increment\"\n        onClick={active == false ? () => setIncreaseBreak(true) : null}\n      >\n        up\n      </button>\n      <div id=\"session-label\">Session Length</div>\n      <button\n        id=\"session-decrement\"\n        onClick={active == false ? () => setReduceSession(true) : null}\n      >\n        down\n      </button>\n      <div id=\"session-length\">{sessionLength}</div>\n      <button\n        id=\"session-increment\"\n        onClick={active == false ? () => setIncreaseSession(true) : null}\n      >\n        up\n      </button>\n      <span></span>\n      <button\n        id=\"start_stop\"\n        onClick={() => {\n          setActive(active => !active);\n        }}\n      >\n        pause\n      </button>\n      <button id=\"reset\" onClick={() => resetting()}>\n        reset\n      </button>\n      <div id=\"timer-label\">{blockType}</div>\n      <div id=\"time-left\">\n        {minutes < 10 ? `0${minutes}` : minutes}:\n        {seconds < 10 ? `0${seconds}` : seconds}\n      </div>\n      <audio\n        src=\"https://freecodecampassets.s3.us-east-2.amazonaws.com/Clock+Sounds/37720__still-frames__om.mp3\"\n        type=\"audio/ogg\"\n        className=\"clip\"\n        id=\"beep\"\n        ref={qRef}\n        title=\"Ohm\"\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}